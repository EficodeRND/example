service: example
frameworkVersion: '3'
configValidationMode: error
provider:
  name: aws
  architecture: ${param:architecture, 'x86_64'}
  runtime: python3.11
  stage: ${opt:stage, 'local'}
  region: ${opt:region, 'us-east-1'}
  timeout: 30
  environment:
    PYTHONPATH: /var/task/lambdas:/var/task/venv/lib/python3.11/site-packages:/opt/python/lib/site-packages
    LOG_LEVEL: "DEBUG"
    LS_LOG: "trace"
    DEBUG: "1"
    ENVIRONMENT: LOCAL

custom:
  localstack:
    host: http://127.0.0.1
    stages:
      - local
    lambda:
      mountCode: false
    autostart: false
  envVariableENVIRONMENT:
    default: LOCAL
  envVariableTOKEN_AUGMENTATION_ENVIRONMENT:
    default: LOCAL
  envVariableLOG_LEVEL:
    default: DEBUG

  asyncRestApi: false

appSync: ${file(resources/appSync.yml):appSync}

functions:
  - ${file(resources/functions.yml)}
  - ${file(resources/dev_functions.yml)}

layers: ${file(resources/layers.yml):layers}

plugins:
  - serverless-plugin-conditional-functions
  - serverless-localstack
  - serverless-iam-roles-per-function
  - serverless-appsync-plugin
  - ./layers/layerInstallPlugin.js
  - serverless-step-functions

resources:
  - Conditions:
      IsNotLocal: !Not [!Equals ["${self:provider.stage}","local"]]
  - ${file(resources/cognito.yml)}
  - ${file(resources/cognitoGroups.yml)}
  - ${file(resources/iam.yml)}
  - Resources:
      DBCluster:
        Type: "AWS::RDS::DBCluster"
        DeletionPolicy: Snapshot
        UpdateReplacePolicy: Snapshot
        Properties:
          DatabaseName: test
          DBClusterIdentifier: "${self:service}-${self:provider.stage}-db-cluster"
          EnableHttpEndpoint: true
          Engine: aurora-postgresql
          EngineVersion: "11"
          MasterUsername: possu
          MasterUserPassword: test
          StorageEncrypted: true
          UseLatestRestorableTime: true
      DBMasterSecret:
        Type: 'AWS::SecretsManager::Secret'
        Properties:
          Name: "${self:service}-${self:provider.stage}-DB-master-secret"
          Description: "RDS Master credentials for ${self:service}-${self:provider.stage}"
          SecretString: '{"username": "possu", "host": "localhost.localstack.cloud", "port": "4510", "dbname": "test", "password": "test"}'
      DBAppSecret:
        Type: 'AWS::SecretsManager::Secret'
        Properties:
          Name: "${self:service}-${self:provider.stage}-DB-app-secret"
          Description: "RDS App credentials for ${self:service}-${self:provider.stage}"
          SecretString: '{"username": "example", "host": "localhost.localstack.cloud", "port": "4510", "dbname": "example", "password": "example"}'
      JiraTokenSecret:
        Type: 'AWS::SecretsManager::Secret'
        Properties:
          Name: ${self:service}-${self:provider.stage}-jira-token
          Description: 'Jira token for ${self:service}-${self:provider.stage}'
          Tags: ${file(../commonResources/defaultTags.yml):TagsList}
          SecretString: A ## Manually add the secret from UI

  - Outputs:
      HostedUI:
        Value: localhost.localstack.cloud
      Region:
        Value: ${self:provider.region}
      Local:
        Value: true
      AppSyncUrl:
        Value: !Join [
          "",
          [
            "http://localhost:4566/graphql/",
            !GetAtt GraphQlApi.ApiId,
          ],
        ]

package:
  individually: true
  patterns:
    - '!**/**'
    - 'lambdas/__init__.py'
    - 'lambdas/utils/dt_utils.py'
    - 'lambdas/utils/str_utils.py'
    - 'lambdas/utils/validators.py'
    - 'lambdas/utils/common.py'
    - 'lambdas/services/db_manager.py'
    - 'lambdas/services/secrets_service.py'
